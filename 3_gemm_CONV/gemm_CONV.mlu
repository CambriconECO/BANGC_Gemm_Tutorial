#include "mlu.h"
#define ROUND 256
__mlu_entry__ void gemm16Kernel(half *outputDDR, int8_t *input1DDR, int8_t *input2DDR,
                                uint32_t m, uint32_t k, uint32_t n, int16_t pos) {
	__nram__ int8_t input1NRAM[256*256];
	__nram__ int8_t input2NRAM[256*256];
	__nram__ int8_t input2NRAM_tmp[256*256];
	__wram__ int8_t input2WRAM[256*256];
	__nram__ half outputNRAM[256*256];
	__memcpy(input1NRAM, input1DDR, m * k * sizeof(int8_t), GDRAM2NRAM); 
							//在这里将左矩阵一次性拷入NRAM
	
	int all_round = n / ROUND;
	int32_t dst_stride = (ROUND * k / 64) * sizeof(int8_t);
	int32_t src_stride = k * sizeof(int8_t);
	int32_t size = k * sizeof(int8_t);
	int32_t total_times = ROUND / 64;
    //__bang_printf("taskDim=%d,clusterId=%d,coreId=%d\n",taskDim,clusterId,coreId);
	for(int i = 0; i < all_round; i++) {
        __bang_write_zero((half *)input2NRAM_tmp, 256 * 128);
        __bang_write_zero((half *)input2NRAM, 256 * 128);
		__memcpy(input2NRAM_tmp, input2DDR + i * ROUND * k, 
									k * ROUND * sizeof(int8_t), GDRAM2NRAM);
		for (int j = 0; j < total_times; j++) {     //这里将数据摆放成bang_conv可以使用的格式
			__memcpy(input2NRAM + j * k, input2NRAM_tmp + j * 64 * k,
										size, NRAM2NRAM, dst_stride, src_stride, 64 - 1);
		}
		__memcpy(input2WRAM, input2NRAM, ROUND*k*sizeof(int8_t), NRAM2WRAM);
		__bang_conv(outputNRAM, input1NRAM, input2WRAM, k, m, 1, 1, 1, 1, 1, ROUND, pos);
		__memcpy(outputDDR + i * ROUND, 
            outputNRAM,
            ROUND * sizeof(half), 
            NRAM2GDRAM, 
            n * sizeof(half), 
            ROUND * sizeof(half), 
            m-1);
		/*for (int j = 0; j < m; j++) {   //要对每轮计算的结果进行拼接
			__memcpy(outputDDR + i * ROUND + j * n, outputNRAM + j * ROUND,
									ROUND * sizeof(half), NRAM2GDRAM);
	    }*/
	}
}

